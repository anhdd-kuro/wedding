---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/global.css"

interface Props {
  title: string
  description: string
  image?: string
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description, image = "/ogp.png" } = Astro.props
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/logo.png" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<!-- Preload font -->
<link
  href="https://fonts.googleapis.com/css2?family=Lexend:wght@100;300;400;500;600;700&family=Roboto:wght@400;500;600;700&display=swap"
  rel="preload"
/>
<link
  href="https://fonts.googleapis.com/css2?family=Cormorant+Upright:wght@300;500;700&family=Lexend:wght@100;300;400;500;600;700&family=Roboto:wght@400;500;700&display=swap"
  rel="preload"
/>
<!-- Load font -->
<link
  href="https://fonts.googleapis.com/css2?family=Lexend:wght@100;300;400;500;600;700&family=Roboto:wght@400;500;600;700&display=swap"
  rel="stylesheet"
/>
<link
  href="https://fonts.googleapis.com/css2?family=Cormorant+Upright:wght@300;500;700&family=Lexend:wght@100;300;400;500;600;700&family=Roboto:wght@400;500;700&display=swap"
  rel="stylesheet"
/>

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Sentry -->
<script>
  import * as Sentry from "@sentry/browser"

  Sentry.init({
    dsn: "https://950f4d07566eb8d94f2d9e537060d02b@o4504987250589696.ingest.sentry.io/4505703132495872",
    integrations: [
      new Sentry.BrowserTracing({
        // Set 'tracePropagationTargets' to control for which URLs distributed tracing should be enabled
        tracePropagationTargets: [
          "localhost",
          "https://anh-an-wedding.vercel.app",
        ],
      }),
      new Sentry.Replay(),
    ],
    // Performance Monitoring
    tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
    // Session Replay
    replaysSessionSampleRate: 0.1, // This sets the sample rate at 10%. You may want to change it to 100% while in development and then sample at a lower rate in production.
    replaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.
  })
</script>

<script>
  const lazyBg = document.querySelectorAll(".lazy-bg")
  const lazyBgObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting && entry.target instanceof HTMLElement) {
        entry.target.style.backgroundImage = `url(${entry.target.dataset.src})`
        lazyBgObserver.unobserve(entry.target)
      }
    })
  })

  lazyBg.forEach((bg) => {
    lazyBgObserver.observe(bg)
  })
</script>
